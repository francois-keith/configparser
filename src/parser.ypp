/* This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */
 
%require "2.4.1"
%skeleton "lalr1.cc"
%defines
%locations

%define namespace "BisonFlex"

%define parser_class_name "Parser"

%parse-param { BisonFlex::Scanner &scanner }
%parse-param { std::vector< std::vector<std::string> > &configlines }

%lex-param   { BisonFlex::Scanner &scanner }

%code requires {
	
	#include <string>
	#include <sstream>
	#include <iostream>
	#include <vector>
	#include <string>

	// We want to return a string
	#define YYSTYPE std::string

		namespace BisonFlex {

			// Forward-declare the Scanner class; the Parser needs to be assigned a 
			// Scanner, but the Scanner can't be declared without the Parser
			
			class Scanner ;
		
		}
}

%code {
	// Prototype for the yylex function
	static int yylex(BisonFlex::Parser::semantic_type * yylval,
	                 BisonFlex::Parser::location_type * yylloc,
	                 BisonFlex::Scanner &scanner);
}

%token STRING SEPARATOR COMMENTAIRE COMMAND_START COMMAND_STOP

%%

input
	: input line
	| line
	;
	
line
	: line_1
	| line_2
	| line_3
	| line_4
	| line_5
	| commentaire
	;
	
line_1
	: COMMAND_START STRING COMMAND_STOP STRING { std::vector<std::string>  line ;
						     line.push_back ( $2 ) ;
						     line.push_back ( $4 ) ; 
						     configlines.push_back ( line ) ; }
	;
		

line_2
	: COMMAND_START STRING COMMAND_STOP STRING STRING { std::vector<std::string>  line ;
						     	    line.push_back ( $2 ) ;
						            line.push_back ( $4 ) ; 
						            line.push_back ( $5 ) ; 
						     	    configlines.push_back ( line ) ; }
	;
	
line_3
	: COMMAND_START STRING COMMAND_STOP STRING STRING STRING { std::vector<std::string>  line ;
						     	    line.push_back ( $2 ) ;
						            line.push_back ( $4 ) ; 
						            line.push_back ( $5 ) ;
						            line.push_back ( $6 ) ;
						     	    configlines.push_back ( line ) ; }
	;

line_4
	: COMMAND_START STRING COMMAND_STOP STRING STRING STRING STRING { std::vector<std::string>  line ;
								     	    line.push_back ( $2 ) ;
								            line.push_back ( $4 ) ; 
								            line.push_back ( $5 ) ; 
								            line.push_back ( $6 ) ; 
								            line.push_back ( $7 ) ; 
								     	    configlines.push_back ( line ) ; }
	;

line_5
	: COMMAND_START STRING COMMAND_STOP STRING STRING STRING STRING STRING { std::vector<std::string>  line ;
									     	    line.push_back ( $2 ) ;
									            line.push_back ( $4 ) ; 
									            line.push_back ( $5 ) ; 
									            line.push_back ( $6 ) ; 
									            line.push_back ( $7 ) ; 
									            line.push_back ( $8 ) ; 
						     	    			    configlines.push_back ( line ) ; }
	;
	
commentaire
        : COMMENTAIRE { }
	
%%

// Error function throws an exception (std::string) with the location and error message
void BisonFlex::Parser::error(const BisonFlex::Parser::location_type &loc,
                                          const std::string &msg) {
	
	std::cerr << "Parser Error at " << loc << ": " << msg << std::endl ;
	std::ostringstream ret;
	ret << "Parser Error at " << loc << ": " << msg;
	throw ret.str();
}

// Now that we have the Parser declared, we can declare the Scanner and implement
// the yylex function
#include "scanner.h"
static int yylex(BisonFlex::Parser::semantic_type * yylval,
                 BisonFlex::Parser::location_type * yylloc,
                 BisonFlex::Scanner &scanner) {
	return scanner.yylex(yylval, yylloc);
}

